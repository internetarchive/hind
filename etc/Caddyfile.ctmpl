{
  {{ if ne (env "ON_DEMAND_TLS_ASK") "" }}
    on_demand_tls {
      ask {{ env "ON_DEMAND_TLS_ASK" }}
    }
  {{ end }}

  log {
    output file /var/log/caddy/access.log
  }
  auto_https disable_redirects
}

:80 {
  # just handle ACME challenges; redirect all other traffic to HTTPS
  handle /.well-known/acme-challenge/* {
    root * /pv/CERTS/.local/share/caddy
    file_server
  }
  redir https://{host}{uri} permanent
}


# start off with nice, easy way(s) to get to nomad
{{- $NAMES_INTO_NOMAD := env "FQDN" }}
{{- $extra := env "NOMAD_ADDR_EXTRA" }}
{{- if ne $extra "" }}
  {{ $NAMES_INTO_NOMAD = (print $NAMES_INTO_NOMAD "," $extra) }}
{{- end }}
{{- range $NAMES_INTO_NOMAD | split "," }}
  https://{{- . }} {
    {{ if ne (env "ALLOWED_REMOTE_IPS_CONTROL_PLANE") "" }}
      @blocked not remote_ip {{ env "ALLOWED_REMOTE_IPS_CONTROL_PLANE" }}
      respond @blocked Forbidden 403
    {{ end }}

    reverse_proxy localhost:4646
    {{ if ne (env "ON_DEMAND_TLS_ASK") "" }}
      tls {
        on_demand
      }
    {{ end }}
    log
  }
{{ end }}



# NOTE: two styles of possible tags:
#          https://av.dev.archive.org
#          https://av.dev.archive.org:5432  (only for:  www-dweb-ipfs  www-dweb-webtorrent)

# NOTE: `trusted_proxies` is for `X-Forwarded-Host` header from something like nginx `proxy_pass`
# NOTE: 255.255.255.255 below is a fake IP that allows an external managment process (eg: a cron)
#       to update perl/sed replace append IPs to that value dynamically if needed
#       (eg: changing list of IP addresses)
{{ range services -}}
  {{ range $tag, $services := service .Name|byTag -}}
    {{- $service_name := (index $services 0).Name}}

# ------
# Tag: {{ $tag }}
# Name: {{ $service_name }}

    {{if $tag | regexMatch "^https://" -}}
      {{- $tag }} {
        {{ if ne (env "ALLOWED_REMOTE_IPS_SERVICES") "" }}
          @blocked not remote_ip {{ env "ALLOWED_REMOTE_IPS_SERVICES" }} 255.255.255.255
          respond @blocked Forbidden 403
        {{ end }}

        reverse_proxy {{ range $services }} {{ .Address }}:{{ .Port }} {{ end }} {
          lb_policy ip_hash
          trusted_proxies {{ env "TRUSTED_PROXIES" }}
        }
        {{ if ne (env "ON_DEMAND_TLS_ASK") "" }}
          tls {
            on_demand
          }
        {{ end }}
        log
      }
    {{- end -}}
  {{- end -}}
{{- end }}
