{
	{{ range env "ON_DEMAND_TLS_ASK" | split "!" }}
		on_demand_tls {
			ask {{ env "ON_DEMAND_TLS_ASK" }}
			interval 1m
			burst 10
		}
	{{ end }}

	log {
		output file /var/log/caddy/access.log
	}
}

# unknown hostnames go to 404 page
http:// {
	redir {{ env "UNKNOWN_SERVICE_404" }}
}


# start off with nice, easy way(s) to get to nomad

{{ range env "NOMAD_ADDR_EXTRA" | split "," }}
https://{{- . }} {
  reverse_proxy localhost:4646
  {{ range env "ON_DEMAND_TLS_ASK" | split "!" }}
    tls {
      on_demand
    }
  {{ end }}
	log
}
http://{{- . }} {
  redir https://{host}{uri} permanent
}
{{ end }}


{{ env "FQDN" }} {
	reverse_proxy localhost:4646
  {{ range env "ON_DEMAND_TLS_ASK" | split "!" }}
    tls {
      on_demand
    }
  {{ end }}
	log
}


{{ range env "REVERSE_PROXY" | split "," -}}
  {{- $hosty := . | regexReplaceAll ":[0-9][0-9]+.*$" "" -}}
  {{- $port  := . | regexReplaceAll "^.*:([0-9][0-9]+).*$" "$1" -}}
  {{- if . | regexMatch "^https://" -}}
{{ $hosty }} {
  reverse_proxy localhost:{{ $port }}
  {{ range env "ON_DEMAND_TLS_ASK" | split "!" }}
    tls {
      on_demand
    }
  {{ end }}
	log
}
  {{ else if . | regexMatch "^http://" }}
{{ $hosty }} {
  reverse_proxy localhost:{{ $port }}
}
  {{ else }}
https://{{ $hosty }} {
  reverse_proxy localhost:{{ $port }}
  {{ range env "ON_DEMAND_TLS_ASK" | split "!" }}
    tls {
      on_demand
    }
  {{ end }}
	log
}
http://{{ $hosty }} {
  redir https://{host}{uri} permanent
}
  {{ end }}
{{ end }}



# NOTE: three styles of possible origins:
#          https://av.dev.archive.org
#          https://av.dev.archive.org:5432
#          http://av.dev.archive.org:5432

# NOTE: `trusted_proxies` is for `X-Forwarded-Host` header from something like nginx `proxy_pass`.
# NOTE: `@hsts-on` allows for requests coming in over http:// from something like nginx `proxy_pass`
#        to tell us *not* to add HSTS header to tell browser to only use https not http.
# NOTE: only apply HSTS to http:// variants of hostnames of origins passed in starting with 'https://'

{{ range services -}}
  {{ range $tag, $services := service .Name|byTag -}}
    {{- $service_name := (index $services 0).Name}}

# ------
# Tag: {{ $tag }}
# Name: {{ $service_name }}

    {{ $origin := $tag
      |regexReplaceAll "  NOTE: all these regexReplaceAll are legacy tag transformers"  ""
      |regexReplaceAll "^urlprefix-.*:80/ redirect=308"  ""
      |regexReplaceAll "^urlprefix-([^:])"  "https://$1"
      |regexReplaceAll "^https://(.*) proto=http$"  "http://$1"
      |regexReplaceAll ":443/$"  ""
      |regexReplaceAll "/$"  ""
    -}}


    {{- if $origin | regexMatch "^https://" -}}


{{ $origin }} {
  reverse_proxy {{ range $services }} {{ .Address }}:{{ .Port }} {{ end }} {
    lb_policy least_conn
    trusted_proxies {{ env "TRUSTED_PROXIES" }}
  }
  {{ range env "ON_DEMAND_TLS_ASK" | split "!" }}
    tls {
      on_demand
    }
  {{ end }}
	log
}

      {{- if $origin | regexReplaceAll "^https://" "" | regexMatch ":" }}{{- else }}
http://{{ $origin | regexReplaceAll "^https://" "" }} {
  @hsts-on {
    not {
      header_regexp X-HSTS "off"
    }
  }
  header  @hsts-on  Strict-Transport-Security  max-age=15724800

  reverse_proxy {{ range $services }} {{ .Address }}:{{ .Port }} {{ end }} {
    lb_policy least_conn
  }
	log
}
      {{- end -}}


    {{- else if $origin | regexMatch "^http://" -}}


# (rare) HTTP only port
{{ $origin }} {
  reverse_proxy {{ range $services }} {{ .Address }}:{{ .Port }} {{ end }} {
    lb_policy least_conn
  }
	log
}


    {{- end -}}
  {{- end -}}
{{- end }}
